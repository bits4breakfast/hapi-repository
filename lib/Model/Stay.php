<?php
/**
 * Stay
 *
 * PHP version 5
 *
 * @category Class
 * @package  HapiRepository
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* HAPI Repository API
 *
* API for retrieving objects from HAPI repository
 *
* OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HapiRepository\Model;

use \ArrayAccess;
use \HapiRepository\ObjectSerializer;

/**
 * Stay Class Doc Comment
 *
 * @category Class
 * @package  HapiRepository
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Stay implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Stay';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'property_id' => '\HapiRepository\Model\PropertyId',
'reservation_id' => 'string',
'room_stay' => '\HapiRepository\Model\RoomStay',
'repository_created' => 'string',
'repository_updated' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'property_id' => null,
'reservation_id' => null,
'room_stay' => null,
'repository_created' => null,
'repository_updated' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_id' => 'propertyId',
'reservation_id' => 'reservationId',
'room_stay' => 'roomStay',
'repository_created' => 'repositoryCreated',
'repository_updated' => 'repositoryUpdated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_id' => 'setPropertyId',
'reservation_id' => 'setReservationId',
'room_stay' => 'setRoomStay',
'repository_created' => 'setRepositoryCreated',
'repository_updated' => 'setRepositoryUpdated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_id' => 'getPropertyId',
'reservation_id' => 'getReservationId',
'room_stay' => 'getRoomStay',
'repository_created' => 'getRepositoryCreated',
'repository_updated' => 'getRepositoryUpdated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_id'] = isset($data['property_id']) ? $data['property_id'] : null;
        $this->container['reservation_id'] = isset($data['reservation_id']) ? $data['reservation_id'] : null;
        $this->container['room_stay'] = isset($data['room_stay']) ? $data['room_stay'] : null;
        $this->container['repository_created'] = isset($data['repository_created']) ? $data['repository_created'] : null;
        $this->container['repository_updated'] = isset($data['repository_updated']) ? $data['repository_updated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets property_id
     *
     * @return \HapiRepository\Model\PropertyId
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param \HapiRepository\Model\PropertyId $property_id property_id
     *
     * @return $this
     */
    public function setPropertyId($property_id)
    {
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets reservation_id
     *
     * @return string
     */
    public function getReservationId()
    {
        return $this->container['reservation_id'];
    }

    /**
     * Sets reservation_id
     *
     * @param string $reservation_id id of reservation associated with stay
     *
     * @return $this
     */
    public function setReservationId($reservation_id)
    {
        $this->container['reservation_id'] = $reservation_id;

        return $this;
    }

    /**
     * Gets room_stay
     *
     * @return \HapiRepository\Model\RoomStay
     */
    public function getRoomStay()
    {
        return $this->container['room_stay'];
    }

    /**
     * Sets room_stay
     *
     * @param \HapiRepository\Model\RoomStay $room_stay room_stay
     *
     * @return $this
     */
    public function setRoomStay($room_stay)
    {
        $this->container['room_stay'] = $room_stay;

        return $this;
    }

    /**
     * Gets repository_created
     *
     * @return string
     */
    public function getRepositoryCreated()
    {
        return $this->container['repository_created'];
    }

    /**
     * Sets repository_created
     *
     * @param string $repository_created repository create date in YYYY-MM-DDThh:mm:ss.sss format
     *
     * @return $this
     */
    public function setRepositoryCreated($repository_created)
    {
        $this->container['repository_created'] = $repository_created;

        return $this;
    }

    /**
     * Gets repository_updated
     *
     * @return string
     */
    public function getRepositoryUpdated()
    {
        return $this->container['repository_updated'];
    }

    /**
     * Sets repository_updated
     *
     * @param string $repository_updated repository update date in YYYY-MM-DDThh:mm:ss.sss format
     *
     * @return $this
     */
    public function setRepositoryUpdated($repository_updated)
    {
        $this->container['repository_updated'] = $repository_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
