<?php
/**
 * Rate
 *
 * PHP version 5
 *
 * @category Class
 * @package  HapiRepository
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HAPI Repository API
 *
 * API for retrieving objects from HAPI repository
 *
 * The version of the OpenAPI document: 2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HapiRepository\Model;

use \ArrayAccess;
use \HapiRepository\ObjectSerializer;

/**
 * Rate Class Doc Comment
 *
 * @category Class
 * @package  HapiRepository
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Rate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Rate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'property_id' => '\HapiRepository\Model\PropertyId',
        'id' => 'string',
        'sell_dates' => '\HapiRepository\Model\TimeSpan',
        'room_type' => 'string',
        'category' => 'string',
        'market_code' => 'string',
        'source_code' => 'string',
        'status' => 'string',
        'yield_status' => 'string',
        'details' => '\HapiRepository\Model\RateDetail[]',
        'long_description' => 'string',
        'short_description' => 'string',
        'repository_created' => 'string',
        'repository_updated' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'property_id' => null,
        'id' => null,
        'sell_dates' => null,
        'room_type' => null,
        'category' => null,
        'market_code' => null,
        'source_code' => null,
        'status' => null,
        'yield_status' => null,
        'details' => null,
        'long_description' => null,
        'short_description' => null,
        'repository_created' => null,
        'repository_updated' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_id' => 'propertyId',
        'id' => 'id',
        'sell_dates' => 'sellDates',
        'room_type' => 'roomType',
        'category' => 'category',
        'market_code' => 'marketCode',
        'source_code' => 'sourceCode',
        'status' => 'status',
        'yield_status' => 'yieldStatus',
        'details' => 'details',
        'long_description' => 'longDescription',
        'short_description' => 'shortDescription',
        'repository_created' => 'repositoryCreated',
        'repository_updated' => 'repositoryUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_id' => 'setPropertyId',
        'id' => 'setId',
        'sell_dates' => 'setSellDates',
        'room_type' => 'setRoomType',
        'category' => 'setCategory',
        'market_code' => 'setMarketCode',
        'source_code' => 'setSourceCode',
        'status' => 'setStatus',
        'yield_status' => 'setYieldStatus',
        'details' => 'setDetails',
        'long_description' => 'setLongDescription',
        'short_description' => 'setShortDescription',
        'repository_created' => 'setRepositoryCreated',
        'repository_updated' => 'setRepositoryUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_id' => 'getPropertyId',
        'id' => 'getId',
        'sell_dates' => 'getSellDates',
        'room_type' => 'getRoomType',
        'category' => 'getCategory',
        'market_code' => 'getMarketCode',
        'source_code' => 'getSourceCode',
        'status' => 'getStatus',
        'yield_status' => 'getYieldStatus',
        'details' => 'getDetails',
        'long_description' => 'getLongDescription',
        'short_description' => 'getShortDescription',
        'repository_created' => 'getRepositoryCreated',
        'repository_updated' => 'getRepositoryUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_id'] = isset($data['property_id']) ? $data['property_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['sell_dates'] = isset($data['sell_dates']) ? $data['sell_dates'] : null;
        $this->container['room_type'] = isset($data['room_type']) ? $data['room_type'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['market_code'] = isset($data['market_code']) ? $data['market_code'] : null;
        $this->container['source_code'] = isset($data['source_code']) ? $data['source_code'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['yield_status'] = isset($data['yield_status']) ? $data['yield_status'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['repository_created'] = isset($data['repository_created']) ? $data['repository_created'] : null;
        $this->container['repository_updated'] = isset($data['repository_updated']) ? $data['repository_updated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_id
     *
     * @return \HapiRepository\Model\PropertyId|null
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param \HapiRepository\Model\PropertyId|null $property_id property_id
     *
     * @return $this
     */
    public function setPropertyId($property_id)
    {
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Rate code
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sell_dates
     *
     * @return \HapiRepository\Model\TimeSpan|null
     */
    public function getSellDates()
    {
        return $this->container['sell_dates'];
    }

    /**
     * Sets sell_dates
     *
     * @param \HapiRepository\Model\TimeSpan|null $sell_dates sell_dates
     *
     * @return $this
     */
    public function setSellDates($sell_dates)
    {
        $this->container['sell_dates'] = $sell_dates;

        return $this;
    }

    /**
     * Gets room_type
     *
     * @return string|null
     */
    public function getRoomType()
    {
        return $this->container['room_type'];
    }

    /**
     * Sets room_type
     *
     * @param string|null $room_type Room type
     *
     * @return $this
     */
    public function setRoomType($room_type)
    {
        $this->container['room_type'] = $room_type;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Rate category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets market_code
     *
     * @return string|null
     */
    public function getMarketCode()
    {
        return $this->container['market_code'];
    }

    /**
     * Sets market_code
     *
     * @param string|null $market_code Rate marketing code
     *
     * @return $this
     */
    public function setMarketCode($market_code)
    {
        $this->container['market_code'] = $market_code;

        return $this;
    }

    /**
     * Gets source_code
     *
     * @return string|null
     */
    public function getSourceCode()
    {
        return $this->container['source_code'];
    }

    /**
     * Sets source_code
     *
     * @param string|null $source_code Rate source code
     *
     * @return $this
     */
    public function setSourceCode($source_code)
    {
        $this->container['source_code'] = $source_code;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Active status of rate
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets yield_status
     *
     * @return string|null
     */
    public function getYieldStatus()
    {
        return $this->container['yield_status'];
    }

    /**
     * Sets yield_status
     *
     * @param string|null $yield_status Is rate yieldable
     *
     * @return $this
     */
    public function setYieldStatus($yield_status)
    {
        $this->container['yield_status'] = $yield_status;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \HapiRepository\Model\RateDetail[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \HapiRepository\Model\RateDetail[]|null $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string|null
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string|null $long_description Long info
     *
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description Short info
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets repository_created
     *
     * @return string|null
     */
    public function getRepositoryCreated()
    {
        return $this->container['repository_created'];
    }

    /**
     * Sets repository_created
     *
     * @param string|null $repository_created Repository create date in YYYY-MM-DDThh:mm:ss.sss format
     *
     * @return $this
     */
    public function setRepositoryCreated($repository_created)
    {
        $this->container['repository_created'] = $repository_created;

        return $this;
    }

    /**
     * Gets repository_updated
     *
     * @return string|null
     */
    public function getRepositoryUpdated()
    {
        return $this->container['repository_updated'];
    }

    /**
     * Sets repository_updated
     *
     * @param string|null $repository_updated Repository update date in YYYY-MM-DDThh:mm:ss.sss format
     *
     * @return $this
     */
    public function setRepositoryUpdated($repository_updated)
    {
        $this->container['repository_updated'] = $repository_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


