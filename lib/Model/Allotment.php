<?php
/**
 * Allotment
 *
 * PHP version 5
 *
 * @category Class
 * @package  HapiRepository
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* HAPI Repository API
 *
* API for retrieving objects from HAPI repository
 *
* OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HapiRepository\Model;

use \ArrayAccess;
use \HapiRepository\ObjectSerializer;

/**
 * Allotment Class Doc Comment
 *
 * @category Class
 * @description group block of inventory
 * @package  HapiRepository
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Allotment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Allotment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'property_id' => '\HapiRepository\Model\PropertyId',
'id' => 'string',
'status' => 'string',
'block_name' => 'string',
'dates' => '\HapiRepository\Model\TimeSpan',
'market_code' => 'string',
'source_code' => 'string',
'channel_code' => 'string',
'booking_method' => 'string',
'billing_type' => 'string',
'includes_food_and_bev' => 'bool',
'block_type' => 'string',
'comments' => '\HapiRepository\Model\Comment[]',
'profiles' => '\HapiRepository\Model\Profile[]',
'inventory_blocks' => '\HapiRepository\Model\InventoryBlock[]',
'repository_created' => 'string',
'repository_updated' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'property_id' => null,
'id' => null,
'status' => null,
'block_name' => null,
'dates' => null,
'market_code' => null,
'source_code' => null,
'channel_code' => null,
'booking_method' => null,
'billing_type' => null,
'includes_food_and_bev' => null,
'block_type' => null,
'comments' => null,
'profiles' => null,
'inventory_blocks' => null,
'repository_created' => null,
'repository_updated' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_id' => 'propertyId',
'id' => 'id',
'status' => 'status',
'block_name' => 'blockName',
'dates' => 'dates',
'market_code' => 'marketCode',
'source_code' => 'sourceCode',
'channel_code' => 'channelCode',
'booking_method' => 'bookingMethod',
'billing_type' => 'billingType',
'includes_food_and_bev' => 'includesFoodAndBev',
'block_type' => 'blockType',
'comments' => 'comments',
'profiles' => 'profiles',
'inventory_blocks' => 'inventoryBlocks',
'repository_created' => 'repositoryCreated',
'repository_updated' => 'repositoryUpdated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_id' => 'setPropertyId',
'id' => 'setId',
'status' => 'setStatus',
'block_name' => 'setBlockName',
'dates' => 'setDates',
'market_code' => 'setMarketCode',
'source_code' => 'setSourceCode',
'channel_code' => 'setChannelCode',
'booking_method' => 'setBookingMethod',
'billing_type' => 'setBillingType',
'includes_food_and_bev' => 'setIncludesFoodAndBev',
'block_type' => 'setBlockType',
'comments' => 'setComments',
'profiles' => 'setProfiles',
'inventory_blocks' => 'setInventoryBlocks',
'repository_created' => 'setRepositoryCreated',
'repository_updated' => 'setRepositoryUpdated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_id' => 'getPropertyId',
'id' => 'getId',
'status' => 'getStatus',
'block_name' => 'getBlockName',
'dates' => 'getDates',
'market_code' => 'getMarketCode',
'source_code' => 'getSourceCode',
'channel_code' => 'getChannelCode',
'booking_method' => 'getBookingMethod',
'billing_type' => 'getBillingType',
'includes_food_and_bev' => 'getIncludesFoodAndBev',
'block_type' => 'getBlockType',
'comments' => 'getComments',
'profiles' => 'getProfiles',
'inventory_blocks' => 'getInventoryBlocks',
'repository_created' => 'getRepositoryCreated',
'repository_updated' => 'getRepositoryUpdated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_id'] = isset($data['property_id']) ? $data['property_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['block_name'] = isset($data['block_name']) ? $data['block_name'] : null;
        $this->container['dates'] = isset($data['dates']) ? $data['dates'] : null;
        $this->container['market_code'] = isset($data['market_code']) ? $data['market_code'] : null;
        $this->container['source_code'] = isset($data['source_code']) ? $data['source_code'] : null;
        $this->container['channel_code'] = isset($data['channel_code']) ? $data['channel_code'] : null;
        $this->container['booking_method'] = isset($data['booking_method']) ? $data['booking_method'] : null;
        $this->container['billing_type'] = isset($data['billing_type']) ? $data['billing_type'] : null;
        $this->container['includes_food_and_bev'] = isset($data['includes_food_and_bev']) ? $data['includes_food_and_bev'] : null;
        $this->container['block_type'] = isset($data['block_type']) ? $data['block_type'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['profiles'] = isset($data['profiles']) ? $data['profiles'] : null;
        $this->container['inventory_blocks'] = isset($data['inventory_blocks']) ? $data['inventory_blocks'] : null;
        $this->container['repository_created'] = isset($data['repository_created']) ? $data['repository_created'] : null;
        $this->container['repository_updated'] = isset($data['repository_updated']) ? $data['repository_updated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets property_id
     *
     * @return \HapiRepository\Model\PropertyId
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param \HapiRepository\Model\PropertyId $property_id property_id
     *
     * @return $this
     */
    public function setPropertyId($property_id)
    {
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Block code and object id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Block status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets block_name
     *
     * @return string
     */
    public function getBlockName()
    {
        return $this->container['block_name'];
    }

    /**
     * Sets block_name
     *
     * @param string $block_name Block name
     *
     * @return $this
     */
    public function setBlockName($block_name)
    {
        $this->container['block_name'] = $block_name;

        return $this;
    }

    /**
     * Gets dates
     *
     * @return \HapiRepository\Model\TimeSpan
     */
    public function getDates()
    {
        return $this->container['dates'];
    }

    /**
     * Sets dates
     *
     * @param \HapiRepository\Model\TimeSpan $dates dates
     *
     * @return $this
     */
    public function setDates($dates)
    {
        $this->container['dates'] = $dates;

        return $this;
    }

    /**
     * Gets market_code
     *
     * @return string
     */
    public function getMarketCode()
    {
        return $this->container['market_code'];
    }

    /**
     * Sets market_code
     *
     * @param string $market_code code identifying marketing type for rate
     *
     * @return $this
     */
    public function setMarketCode($market_code)
    {
        $this->container['market_code'] = $market_code;

        return $this;
    }

    /**
     * Gets source_code
     *
     * @return string
     */
    public function getSourceCode()
    {
        return $this->container['source_code'];
    }

    /**
     * Sets source_code
     *
     * @param string $source_code code identifying source of rate associated to block
     *
     * @return $this
     */
    public function setSourceCode($source_code)
    {
        $this->container['source_code'] = $source_code;

        return $this;
    }

    /**
     * Gets channel_code
     *
     * @return string
     */
    public function getChannelCode()
    {
        return $this->container['channel_code'];
    }

    /**
     * Sets channel_code
     *
     * @param string $channel_code code identifying booking channel for block
     *
     * @return $this
     */
    public function setChannelCode($channel_code)
    {
        $this->container['channel_code'] = $channel_code;

        return $this;
    }

    /**
     * Gets booking_method
     *
     * @return string
     */
    public function getBookingMethod()
    {
        return $this->container['booking_method'];
    }

    /**
     * Sets booking_method
     *
     * @param string $booking_method code identifying booking method for block
     *
     * @return $this
     */
    public function setBookingMethod($booking_method)
    {
        $this->container['booking_method'] = $booking_method;

        return $this;
    }

    /**
     * Gets billing_type
     *
     * @return string
     */
    public function getBillingType()
    {
        return $this->container['billing_type'];
    }

    /**
     * Sets billing_type
     *
     * @param string $billing_type used to indicate if charges should be billed to master account
     *
     * @return $this
     */
    public function setBillingType($billing_type)
    {
        $this->container['billing_type'] = $billing_type;

        return $this;
    }

    /**
     * Gets includes_food_and_bev
     *
     * @return bool
     */
    public function getIncludesFoodAndBev()
    {
        return $this->container['includes_food_and_bev'];
    }

    /**
     * Sets includes_food_and_bev
     *
     * @param bool $includes_food_and_bev used to indicate whether food and drinks should be charged to master account
     *
     * @return $this
     */
    public function setIncludesFoodAndBev($includes_food_and_bev)
    {
        $this->container['includes_food_and_bev'] = $includes_food_and_bev;

        return $this;
    }

    /**
     * Gets block_type
     *
     * @return string
     */
    public function getBlockType()
    {
        return $this->container['block_type'];
    }

    /**
     * Sets block_type
     *
     * @param string $block_type type of block
     *
     * @return $this
     */
    public function setBlockType($block_type)
    {
        $this->container['block_type'] = $block_type;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \HapiRepository\Model\Comment[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \HapiRepository\Model\Comment[] $comments free text comments associated to block
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets profiles
     *
     * @return \HapiRepository\Model\Profile[]
     */
    public function getProfiles()
    {
        return $this->container['profiles'];
    }

    /**
     * Sets profiles
     *
     * @param \HapiRepository\Model\Profile[] $profiles profiles
     *
     * @return $this
     */
    public function setProfiles($profiles)
    {
        $this->container['profiles'] = $profiles;

        return $this;
    }

    /**
     * Gets inventory_blocks
     *
     * @return \HapiRepository\Model\InventoryBlock[]
     */
    public function getInventoryBlocks()
    {
        return $this->container['inventory_blocks'];
    }

    /**
     * Sets inventory_blocks
     *
     * @param \HapiRepository\Model\InventoryBlock[] $inventory_blocks inventory_blocks
     *
     * @return $this
     */
    public function setInventoryBlocks($inventory_blocks)
    {
        $this->container['inventory_blocks'] = $inventory_blocks;

        return $this;
    }

    /**
     * Gets repository_created
     *
     * @return string
     */
    public function getRepositoryCreated()
    {
        return $this->container['repository_created'];
    }

    /**
     * Sets repository_created
     *
     * @param string $repository_created repository create date in YYYY-MM-DDThh:mm:ss.sss format
     *
     * @return $this
     */
    public function setRepositoryCreated($repository_created)
    {
        $this->container['repository_created'] = $repository_created;

        return $this;
    }

    /**
     * Gets repository_updated
     *
     * @return string
     */
    public function getRepositoryUpdated()
    {
        return $this->container['repository_updated'];
    }

    /**
     * Sets repository_updated
     *
     * @param string $repository_updated repository update date in YYYY-MM-DDThh:mm:ss.sss format
     *
     * @return $this
     */
    public function setRepositoryUpdated($repository_updated)
    {
        $this->container['repository_updated'] = $repository_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
