---
openapi: "3.0.1"
info:
  title: "HAPI Repository API"
  description: "API for retrieving objects from HAPI repository"
  version: "2"
servers:
- url: "https://hapicloud-dev.apigee.net/repository"
  variables: {}
security:
- Bearer: []
paths:
  /allotments/{propertyCode}/{id}:
    get:
      tags:
      - "Allotment"
      summary: "Get allotments of specified hotel that defined by chainCode / propertyCode\
        \ (HAPI internal property identifier) and by blockCode and effectiveDate (Allotment\
        \ external identifier)"
      operationId: "getAllotment"
      parameters:
      - name: "propertyCode"
        in: "path"
        description: "Property code as designated in the PMS"
        required: true
        content:
          '*/*':
            schema:
              type: "string"
      - name: "id"
        in: "path"
        description: "Identifier of allotment record in the external system"
        required: true
        content:
          '*/*':
            schema:
              type: "string"
      responses:
        200:
          description: "Repository allotment record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Allotment"
        401:
          description: "Token is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIsInvalidError"
        404:
          description: "Object not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectNotFoundError"
  /allotments/search/{strategy}:
    post:
      tags:
      - "Allotment"
      summary: "Search allotments by date range. Paging is included. The maximum number\
        \ of returned allotments is 1000"
      operationId: "searchAllotments"
      parameters:
      - name: "strategy"
        in: "path"
        description: "The type of search strategy. Could be range or update. In case\
          \ of range strategy, records will be searched by their effectiveDate / expireDate\
          \ instead of searching by updated field in case of update strategy."
        required: true
        content:
          '*/*':
            schema:
              type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepositorySearchRequest"
        required: true
      responses:
        200:
          description: "Set of allotment records with additional info about offset\
            \ and total count of allotments in repository"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSet"
        400:
          description: "Invalid search parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSearchParametersError"
        401:
          description: "Token is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIsInvalidError"
  /inventories/search/{strategy}:
    post:
      tags:
      - "Inventory"
      summary: "Search inventories by date range. Paging is included. The maximum\
        \ number of returned inventories is 1000"
      operationId: "search"
      parameters:
      - name: "strategy"
        in: "path"
        description: "The type of search strategy. Could be dates or update."
        required: true
        content:
          '*/*':
            schema:
              type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepositorySearchRequest"
        required: true
      responses:
        200:
          description: "Set of inventory records with additional info about offset\
            \ and total count of inventories in repository"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSet"
        400:
          description: "Invalid search parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSearchParametersError"
        401:
          description: "Token is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIsInvalidError"
  /profiles/{propertyCode}/{id}:
    get:
      tags:
      - "Profile"
      summary: "Get profile by id"
      operationId: "getProfile"
      parameters:
      - name: "propertyCode"
        in: "path"
        description: "Property code as designated in the PMS"
        required: true
        content:
          '*/*':
            schema:
              type: "string"
      - name: "id"
        in: "path"
        description: "PMS profile id"
        required: true
        content:
          '*/*':
            schema:
              type: "string"
      responses:
        200:
          description: "Profile in HAPI data model"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        401:
          description: "Token is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIsInvalidError"
        404:
          description: "Object not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectNotFoundError"
  /profiles/search:
    post:
      tags:
      - "Profile"
      summary: "Get profiles by date range. Paging is included. The maximum number\
        \ of returned profiles is 1000"
      operationId: "searchProfiles"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepositorySearchRequest"
        required: true
      responses:
        200:
          description: "Repository profile records with additional info about offset\
            \ and total count of profiles in repository"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSet"
        400:
          description: "Invalid search parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSearchParametersError"
        401:
          description: "Token is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIsInvalidError"
  /rates/{propertyCode}/{id}:
    get:
      tags:
      - "Rate"
      summary: "Get rate by rateCode"
      operationId: "getRate"
      parameters:
      - name: "propertyCode"
        in: "path"
        description: "Property code as designated in the PMS"
        required: true
        content:
          '*/*':
            schema:
              type: "string"
      - name: "id"
        in: "path"
        description: "Rate code"
        required: true
        content:
          '*/*':
            schema:
              type: "string"
      responses:
        200:
          description: "RateHeader in HAPI data model"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rate"
        401:
          description: "Token is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIsInvalidError"
        404:
          description: "Object not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectNotFoundError"
  /rates/search:
    post:
      tags:
      - "Rate"
      summary: "Get rates by date range. Paging is included. The maximum number of\
        \ returned rates is 1000"
      operationId: "searchRates"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepositorySearchRequest"
        required: true
      responses:
        200:
          description: "Repository rate records with additional info about offset\
            \ and total count of rates in repository"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSet"
        400:
          description: "Invalid search parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSearchParametersError"
        401:
          description: "Token is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIsInvalidError"
  /reservations/{propertyCode}/{id}:
    get:
      tags:
      - "Reservation"
      summary: "Get stays by reservation number"
      operationId: "getReservation"
      parameters:
      - name: "propertyCode"
        in: "path"
        description: "Property code as designated in the PMS"
        required: true
        content:
          '*/*':
            schema:
              type: "string"
      - name: "id"
        in: "path"
        description: "Reservation id generated by the PMS"
        required: true
        content:
          '*/*':
            schema:
              type: "string"
      responses:
        200:
          description: "Stay record in HAPI external data model"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        401:
          description: "Token is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIsInvalidError"
        404:
          description: "Object not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectNotFoundError"
  /reservations/search:
    post:
      tags:
      - "Reservation"
      summary: "Get reservations by date range. Paging is included. The maximum number\
        \ of returned reservations is 1000"
      operationId: "searchReservations"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepositorySearchRequest"
        required: true
      responses:
        200:
          description: "Reservation records with additional info about offset and\
            \ total count of reservations in repository"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSet"
        400:
          description: "Invalid search parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSearchParametersError"
        401:
          description: "Token is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIsInvalidError"
  /stays/search:
    post:
      tags:
      - "Stay"
      summary: "Get stays by date range. Paging is included. The maximum number of\
        \ returned stays is 1000"
      operationId: "searchStays"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepositorySearchRequest"
        required: true
      responses:
        200:
          description: "Repository stay records with additional info about offset\
            \ and total count of stays in repository"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSet"
        400:
          description: "Invalid search parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSearchParametersError"
        401:
          description: "Token is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIsInvalidError"
  /stays/{propertyCode}/{reservationId}:
    get:
      tags:
      - "Stay"
      summary: "Get reservation by reservation id"
      operationId: "getStay"
      parameters:
      - name: "propertyCode"
        in: "path"
        description: "Property code as designated in the PMS"
        required: true
        content:
          '*/*':
            schema:
              type: "string"
      - name: "reservationId"
        in: "path"
        description: "PMS Reservation id"
        required: true
        content:
          '*/*':
            schema:
              type: "string"
      responses:
        200:
          description: "Reservation in HAPI external data model"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stay"
        401:
          description: "Token is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIsInvalidError"
        404:
          description: "Object not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectNotFoundError"
  /transactions/search:
    post:
      tags:
      - "Transaction"
      summary: "Get transactions by date range. Paging is included. The maximum number\
        \ of returned transactions is 1000"
      operationId: "searchTransactions"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepositorySearchRequest"
        required: true
      responses:
        200:
          description: "Repository transaction records with additional info about\
            \ offset and total count of transactions in repository"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSet"
        400:
          description: "Invalid search parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSearchParametersError"
        401:
          description: "Token is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIsInvalidError"
components:
  schemas:
    Address:
      type: "object"
      properties:
        type:
          type: "string"
          description: "Address type"
          example: "BUSINESS"
        primary:
          type: "boolean"
          description: "Primary address flag"
          example: true
        address1:
          type: "string"
          description: "First line of address. Typically contains street info"
          example: "1234 Park Ave"
        address2:
          type: "string"
          description: "Second line of address. Typically contains apartment info"
          example: "APT 505"
        address3:
          type: "string"
          description: "Third line of address"
        city:
          type: "string"
          description: "City associated to address"
          example: "Miami"
        stateProvince:
          $ref: "#/components/schemas/StateProvince"
        postalCode:
          type: "string"
          description: "Postal or zip code associated to address"
          example: "33133"
        country:
          $ref: "#/components/schemas/Country"
    Allotment:
      type: "object"
      properties:
        propertyId:
          $ref: "#/components/schemas/PropertyId"
        id:
          type: "string"
          description: "Block code and object id"
          example: "HOLIDAY2018"
        status:
          type: "string"
          description: "Block status"
          example: "ACTIVE"
        blockName:
          type: "string"
          description: "Block name"
          example: "CONFERENCE HOLIDAY 2018"
        dates:
          $ref: "#/components/schemas/TimeSpan"
        marketCode:
          type: "string"
          description: "Code identifying marketing type for rate"
          example: "F"
        sourceCode:
          type: "string"
          description: "Code identifying source of rate associated to block"
          example: "SRC"
        channelCode:
          type: "string"
          description: "Code identifying booking channel for block"
          example: "SRC"
        bookingMethod:
          type: "string"
          description: "Code identifying booking method for block"
          example: "IWEB"
        billingType:
          type: "string"
          description: "Used to indicate if charges should be billed to master account"
        includesFoodAndBev:
          type: "boolean"
          description: "Used to indicate whether food and drinks should be charged\
            \ to master account"
          example: true
        blockType:
          type: "string"
          description: "Type of block"
          example: "ELASTIC"
        comments:
          type: "array"
          description: "Free text comments associated to block"
          items:
            $ref: "#/components/schemas/Comment"
        profiles:
          type: "array"
          items:
            $ref: "#/components/schemas/Profile"
        inventoryBlocks:
          type: "array"
          description: "Inventory block detail for allotment"
          items:
            $ref: "#/components/schemas/InventoryBlock"
        notificationType:
          type: "string"
          description: "An enumerated list to identify the notification being sent.\
            \ Available values: NEW, UPDATE, CANCEL"
          example: "ACTIVE"
        blockInventoryType:
          type: "string"
          description: "The type for the inventory such as ELASTIC, NON-ELASTIC, SELL_LIMIT"
          example: "Elastic"
        paymentMethod:
          type: "string"
          description: "The payment method associated with the block"
          example: "CC"
        repositoryCreated:
          type: "string"
        repositoryUpdated:
          type: "string"
    BlockRate:
      type: "object"
      properties:
        guests:
          type: "integer"
          description: "Number of guests"
          format: "int32"
        occupancyProjected:
          type: "integer"
          description: "Projected occupancy for number of guests indicated"
          format: "int32"
          example: 0
        amount:
          type: "number"
          description: "Rate amount"
          example: 105.5
        includesTax:
          type: "boolean"
          description: "Is indicated rate inclusive of tax"
          example: true
    Comment:
      type: "object"
      properties:
        type:
          type: "string"
          description: "Type or source of comment"
          example: "COMMISSION"
        comment:
          type: "string"
          description: "Comment text"
          example: "guest was very nice"
        author:
          type: "string"
          description: "Comment creator"
          example: "SUPERVISOR"
        guestViewable:
          type: "boolean"
          description: "Should comment be visible to guest"
          example: false
        time:
          type: "string"
          description: "Comment create/update time (yyyy-MM-ddTHH:mm:SS)"
          example: "2018-12-01T02:15:00"
    Country:
      type: "object"
      properties:
        code:
          type: "string"
          example: "US"
        name:
          type: "string"
          example: "United States"
    Email:
      type: "object"
      properties:
        type:
          type: "string"
          example: "PRIVATE"
        address:
          type: "string"
          example: "cguest@email.com"
        primary:
          type: "boolean"
          description: "Primary email flag"
          example: true
    IdDocument:
      type: "object"
      properties:
        type:
          type: "string"
          example: "PASSPORT"
        number:
          type: "string"
          example: "12345"
    InventoryBlock:
      type: "object"
      properties:
        roomType:
          type: "string"
          description: "Room type"
          example: "KING"
        rateCode:
          type: "string"
          description: "Code identifying rate for block"
          example: "AAA"
        dates:
          $ref: "#/components/schemas/TimeSpan"
        cutoffDate:
          type: "string"
          description: "Used to determine when the inventory block is released back\
            \ into house inventory"
          example: "2018-12-01"
        numberToBlock:
          type: "integer"
          description: "Number of rooms for this block per day per room type"
          format: "int32"
          example: 2
        numberSold:
          type: "integer"
          description: "Number of rooms sold in block"
          format: "int32"
          example: 5
        compRoomsNumber:
          type: "integer"
          description: "Number of comp rooms available in block"
          format: "int32"
          example: 0
        pickUpStatus:
          type: "string"
          description: "Inventory count type"
          example: "PHYSICAL"
        currencyCode:
          type: "string"
          description: "Code identifying type of currency associated to rate"
          example: "USD"
        rates:
          type: "array"
          description: "Rate and occupancy detail for room type in block"
          items:
            $ref: "#/components/schemas/BlockRate"
    LoyaltyProgram:
      type: "object"
      properties:
        type:
          type: "string"
          description: "Loyalty program type"
          example: "Hotel Rewards"
        membershipId:
          type: "string"
          description: "Account number"
          example: "HR6585421"
    Name:
      type: "object"
      properties:
        salutation:
          type: "string"
          description: "Salutation for guest"
          example: "Mr."
        first:
          type: "string"
          description: "First name"
          example: "Christopher"
        middle:
          type: "string"
          description: "Middle name or initial"
          example: "M"
        last:
          type: "string"
          description: "Last name"
          example: "Guest"
    Phone:
      type: "object"
      properties:
        type:
          type: "string"
          example: "MOBILE"
        number:
          type: "string"
          example: "555-555-1212"
        primary:
          type: "boolean"
          description: "Primary phone flag"
          example: true
    Profile:
      type: "object"
      properties:
        propertyId:
          $ref: "#/components/schemas/PropertyId"
        id:
          type: "string"
          description: "Profile identifier"
          example: "542154"
        type:
          type: "string"
          example: "PERSON"
        name:
          $ref: "#/components/schemas/Name"
        company:
          type: "string"
          description: "Used to provide company name when name field is used for contact\
            \ info"
          example: "HAPI"
        dateOfBirth:
          type: "string"
          example: "1979-10-31"
        emails:
          type: "array"
          items:
            $ref: "#/components/schemas/Email"
        phones:
          type: "array"
          items:
            $ref: "#/components/schemas/Phone"
        addresses:
          type: "array"
          items:
            $ref: "#/components/schemas/Address"
        idDocuments:
          type: "array"
          description: "Identifying document for profile holder"
          items:
            $ref: "#/components/schemas/IdDocument"
        loyaltyPrograms:
          type: "array"
          description: "Rewards program"
          items:
            $ref: "#/components/schemas/LoyaltyProgram"
        creator:
          type: "string"
          description: "User or interface who created the profile"
          example: "AFESSE"
        createdDate:
          type: "string"
          description: "Read-only date and time the profile was created"
          example: "2018-05-14T20:02:40.000"
        travelAgentId:
          type: "string"
          description: "IATA number"
          example: "ABC1234"
        preferences:
          type: "array"
          description: "Guest request"
          example: "Guest will be arriving by spaceship"
          items:
            $ref: "#/components/schemas/SpecialRequest"
        comments:
          type: "array"
          description: "Free text comments"
          items:
            $ref: "#/components/schemas/Comment"
        gender:
          type: "string"
          description: "Gender of the guest"
          example: "MALE"
        hapiId:
          type: "string"
          description: "UID of the profile in HAPI system"
          example: "6327846283assd76xs"
        repositoryCreated:
          type: "string"
          description: "Repository create date in YYYY-MM-DDThh:mm:ss.sss format"
          example: "2018-06-01T15:34:54.000"
        repositoryUpdated:
          type: "string"
          description: "Repository update date in YYYY-MM-DDThh:mm:ss.sss format"
          example: "2018-06-01T15:34:54.000"
    PropertyId:
      type: "object"
      properties:
        chainCode:
          type: "string"
          example: "HIL"
        propertyCode:
          type: "string"
          example: "FSDH"
    SpecialRequest:
      type: "object"
      properties:
        type:
          type: "string"
          description: "Request type"
          example: "INT"
        code:
          type: "string"
          description: "Request code"
          example: "DOUBLE"
        text:
          type: "string"
          description: "Request description or comments"
          example: "Double Bed"
    StateProvince:
      type: "object"
      properties:
        code:
          type: "string"
          description: "Code identifying state or province associated to address"
          example: "FL"
        name:
          type: "string"
          description: "Name of state or province associated to address"
          example: "Florida"
    TimeSpan:
      type: "object"
      properties:
        start:
          type: "string"
          description: "Begin date of span, in YYYY-MM-DD format"
          example: "2018-12-01"
        end:
          type: "string"
          description: "End date of span, in YYYY-MM-DD format"
          example: "2018-12-03"
    TokenIsInvalidError:
      type: "object"
      properties:
        timestamp:
          type: "string"
        status:
          type: "integer"
          format: "int32"
        error:
          type: "string"
        message:
          type: "string"
        path:
          type: "string"
      description: "Token is invalid"
    ObjectNotFoundError:
      type: "object"
      properties:
        timestamp:
          type: "string"
        status:
          type: "integer"
          format: "int32"
        error:
          type: "string"
        message:
          type: "string"
        path:
          type: "string"
      description: "Object not found"
    RecordSet:
      type: "object"
      properties:
        total:
          type: "integer"
          format: "int32"
        offset:
          type: "integer"
          format: "int64"
        entities:
          type: "array"
          description: "Entities of requested type"
          items:
            type: "object"
    InvalidSearchParametersError:
      type: "object"
      properties:
        timestamp:
          type: "string"
        status:
          type: "integer"
          format: "int32"
        error:
          type: "string"
        message:
          type: "string"
        path:
          type: "string"
      description: "Invalid search parameters"
    RepositorySearchRequest:
      type: "object"
      properties:
        offset:
          type: "integer"
          description: "Offset from the begging of retrieved values. If no offset\
            \ value has provided then default (0) will be used"
          format: "int64"
        limit:
          type: "integer"
          description: "Limit of how much values will be retrieved. If no limit value\
            \ has provided then default (100) will be used"
          format: "int32"
        fromDate:
          type: "string"
          description: "Filter date value since which reservations will be retrieved\
            \ (included), in YYYY-MM-DDThh:mm:ss.sssZ format. Filter value in repository\
            \ is latest update time."
          format: "date-time"
        toDate:
          type: "string"
          description: "Filter date value to which reservations will be retrieved\
            \ (included), in YYYY-MM-DDThh:mm:ss.sssZ format. Filter value in repository\
            \ is latest update time."
          format: "date-time"
        chainCode:
          type: "string"
          description: "HAPI internal representation of hotel chain. Together with\
            \ propertyCode compose to unique hotel identifier."
        propertyCode:
          type: "string"
          description: "HAPI internal representation of hotel property. Together with\
            \ chainCode compose to unique hotel identifier."
    Rate:
      type: "object"
      properties:
        propertyId:
          $ref: "#/components/schemas/PropertyId"
        id:
          type: "string"
          description: "Rate code"
          example: "BAR"
        sellDates:
          $ref: "#/components/schemas/TimeSpan"
        roomType:
          type: "string"
          description: "Room type"
          example: "STD"
        category:
          type: "string"
          description: "Rate category"
          example: "STD"
        marketCode:
          type: "string"
          description: "Rate marketing code"
          example: "DM"
        sourceCode:
          type: "string"
          description: "Rate source code"
          example: "SRC"
        status:
          type: "string"
          description: "Active status of rate"
          example: "ACTIVE"
        yieldStatus:
          type: "string"
          description: "Is rate yieldable"
          example: "FULLY"
        details:
          type: "array"
          items:
            $ref: "#/components/schemas/RateDetail"
        longDescription:
          type: "string"
          description: "Long info"
          example: "Some info"
        shortDescription:
          type: "string"
          description: "Short info"
          example: "Some info"
        repositoryCreated:
          type: "string"
          description: "Repository create date in YYYY-MM-DDThh:mm:ss.sss format"
          example: "2018-06-01T15:34:54.000"
        repositoryUpdated:
          type: "string"
          description: "Repository update date in YYYY-MM-DDThh:mm:ss.sss format"
          example: "2018-06-01T15:34:54.000"
    RateDetail:
      type: "object"
      properties:
        dates:
          $ref: "#/components/schemas/TimeSpan"
        rateCode:
          type: "string"
          description: "Detail rate code"
          example: "RACK"
        marketCode:
          type: "string"
          description: "Rate marketing code"
          example: "DM"
        sourceCode:
          type: "string"
          description: "Rate source code"
          example: "SRC"
        packages:
          type: "string"
          description: "Packages included in rate"
          example: "ACTIVE"
        roomTypes:
          type: "array"
          description: "Valid room types for rate"
          example: "K1,Q1"
          items:
            type: "string"
        daysOfWeek:
          type: "array"
          description: "Days of the week for which the rate is valid"
          example: "FRIDAY,SATURDAY,SUNDAY"
          items:
            type: "string"
        rates:
          type: "array"
          description: "Rate amounts by number of guests and guest type"
          items:
            $ref: "#/components/schemas/RateInfo"
    RateInfo:
      type: "object"
      properties:
        guests:
          type: "integer"
          description: "Rate occupancy"
          format: "int32"
          example: 1
        guestType:
          type: "string"
          description: "Rate occupancy type"
          example: "Adult"
        amount:
          type: "number"
          description: "Amount of rate"
          example: 59.5
        currencyCode:
          type: "string"
          description: "Currency code for rate indicated"
          example: "USD"
    Guest:
      type: "object"
      properties:
        profile:
          $ref: "#/components/schemas/Profile"
        primary:
          type: "boolean"
          example: true
        arrivalTransport:
          $ref: "#/components/schemas/TransportationInfo"
        departureTransport:
          $ref: "#/components/schemas/TransportationInfo"
    Reservation:
      type: "object"
      properties:
        propertyId:
          $ref: "#/components/schemas/PropertyId"
        id:
          type: "string"
          description: "Reservation identifier and object key"
          example: "542154"
        bookingConfirmationId:
          type: "string"
          description: "Unique confirmation id within given hotel"
          example: "L7RR1A"
        arrivalDate:
          type: "string"
          description: "Check-in date, in YYYY-MM-DD format"
          example: "2018-08-23"
        arrivalTime:
          type: "string"
          description: "Estimated check-in time"
          example: "17:00:00"
        departureTime:
          type: "string"
          description: "Estimated check-out time"
          example: "18:00:00"
        departureDate:
          type: "string"
          description: "Check-out date, in YYYY-MM-DD format"
          example: "2018-08-25"
        creator:
          type: "string"
          description: "User or interface who created the reservation"
          example: "GARCIA"
        cancelReason:
          type: "string"
          description: "Cancel reason code. Generally cancelReason is used in type\
            \ of enum in external system"
          example: "BECAUSE"
        createdDate:
          type: "string"
          description: "Read-only reservation create date in hotel, in YYYY-MM-DDThh:mm:ss.sss\
            \ format"
          example: "2018-06-01T15:34:54.000"
        cancelledDate:
          type: "string"
          description: "Reservation cancellation date in hotel, in YYYY-MM-DDThh:mm:ss.sss\
            \ format"
          example: "2018-06-01T15:34:54.000"
        cancellationNumber:
          type: "string"
          description: "Cancellation number for reservation. May be supplied externally\
            \ or returned from pms"
          example: "CXL12345"
        cancellationComment:
          type: "string"
          description: "Cancellation comment why reservation was cancelled"
          example: "Just because I don't want to stay here anymore"
        adults:
          type: "integer"
          format: "int32"
          example: 2
        children:
          type: "integer"
          format: "int32"
          example: 1
        status:
          type: "string"
          description: "Current status of reservation"
          example: "RESERVED"
        guests:
          type: "array"
          description: "Guest profiles associated to reservation"
          items:
            $ref: "#/components/schemas/Guest"
        channel:
          type: "string"
        profiles:
          type: "array"
          description: "Non-guest profiles associated to reservation"
          items:
            $ref: "#/components/schemas/Profile"
        roomStays:
          type: "array"
          description: "Room stay information associated to reservation"
          items:
            $ref: "#/components/schemas/RoomStay"
        comments:
          type: "array"
          example: "Guest will be arriving by spaceship"
          items:
            $ref: "#/components/schemas/Comment"
        requests:
          type: "array"
          description: "Guest request"
          items:
            $ref: "#/components/schemas/SpecialRequest"
        notifications:
          type: "array"
          items:
            $ref: "#/components/schemas/ReservationNotification"
        reservationReferences:
          type: "array"
          items:
            $ref: "#/components/schemas/ReservationReference"
        hapiId:
          type: "string"
          description: "UID of the reservation in HAPI system"
          example: "6327846283assd76xs"
        repositoryCreated:
          type: "string"
          description: "Repository create date in YYYY-MM-DDThh:mm:ss.sss format"
          example: "2018-06-01T15:34:54.000"
        repositoryUpdated:
          type: "string"
          description: "Repository update date in YYYY-MM-DDThh:mm:ss.sss format"
          example: "2018-06-01T15:34:54.000"
    ReservationNotification:
      type: "object"
      properties:
        code:
          type: "string"
          description: "Alert code"
          example: "OTH"
        description:
          type: "string"
          description: "Alert text"
          example: "Please give Breakfast vouchers"
        event:
          type: "string"
          description: "Event that triggers alert"
          example: "Check-In"
    ReservationReference:
      type: "object"
      properties:
        type:
          type: "string"
          description: "External reference type or originating system"
          example: "LIBRA"
        id:
          type: "string"
          description: "External reference id"
          example: "b1J1K00000LboFrUAJ"
    Revenue:
      type: "object"
      properties:
        type:
          type: "string"
          description: "Classification of revenue indicated"
          example: "Room"
        currencyCode:
          type: "string"
          description: "Currency code of revenue amount indicated"
          example: "USD"
        amount:
          type: "number"
          description: "Rate amount"
          example: 105.55
        date:
          type: "string"
          description: "Transaction date"
          example: "2018-08-23"
    RoomRate:
      type: "object"
      properties:
        effectiveDates:
          $ref: "#/components/schemas/TimeSpan"
        rateCode:
          type: "string"
          description: "Code identifying the rate"
          example: "AAA"
        currencyCode:
          type: "string"
          description: "Currency code of revenue amount indicated"
          example: "USD"
        amount:
          type: "number"
          description: "Rate amount"
          example: 105.55
    RoomStay:
      type: "object"
      properties:
        roomNumber:
          type: "string"
          description: "Room number for stay"
          example: "122"
        status:
          type: "string"
        guestId:
          type: "string"
          description: "Id of guest associated to stay"
          example: "5658451"
        roomType:
          type: "string"
          description: "Code identifying the type of room associated to stay"
          example: "KING"
        rateCode:
          type: "string"
          description: "Code identifying rate for stay"
          example: "AAA"
        marketCode:
          type: "string"
          description: "Code identifying marketing type for rate"
          example: "F"
        channelCode:
          type: "string"
          description: "Code identifying source of reservation"
          example: "DM"
        sourceCode:
          type: "string"
          description: "Code identifying source of rate associated to stay"
          example: "SRC"
        blockCode:
          type: "string"
          description: "Group block code"
          example: "GROUPBLOCK"
        roomCount:
          type: "integer"
          description: "Number of rooms associated to stay"
          format: "int32"
          example: 1
        paymentMethod:
          type: "string"
          description: "Payment method used in the reservation"
          example: "CA"
        compYN:
          type: "string"
          description: "Is reservation complimentary"
          example: "false"
        rates:
          type: "array"
          items:
            $ref: "#/components/schemas/RoomRate"
        revenue:
          type: "array"
          description: "Details related to revenue"
          items:
            $ref: "#/components/schemas/Revenue"
        services:
          type: "array"
          description: "Service or fixed charge related to reservation"
          items:
            $ref: "#/components/schemas/Service"
        promotionCode:
          type: "string"
          description: "A promotion code associated with the reservation"
    Service:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Code that identifies service"
          example: "CRIB"
        type:
          type: "string"
          description: "Service or fixed charge. defaults to SERVICE if not indicated"
          example: "FIXED_CHARGE"
          enum:
          - "SERVICE"
          - "FIXED_CHARGE"
        price:
          type: "number"
          description: "Cost of service"
          example: 45
        currencyCode:
          type: "string"
          description: "Currency code of price indicated"
          example: "USD"
        rateCode:
          type: "string"
          description: "Rate code of price indicated"
        costType:
          type: "string"
          description: "How is the service or charge priced"
          example: "PER_STAY"
          enum:
          - "PER_STAY"
          - "PER_NIGHT"
          - "PER_WEEK"
          - "PER_USE"
          - "PER_ADULT_PER_NIGHT"
          - "PER_PERSON_PER_NIGHT"
        quantity:
          type: "integer"
          description: "Number of service or fixed charge items"
          format: "int32"
          example: 1
        dates:
          $ref: "#/components/schemas/TimeSpan"
        comment:
          type: "string"
          description: "Fixed charge additional information"
          example: "The fixed charge is applied to guest by request"
    TransportationInfo:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Transportation method identifier (e.g. flight number)"
          example: "DL2562"
        type:
          type: "string"
          description: "Method of transportation"
        location:
          type: "string"
          description: "Originating or destination location code"
          example: "JFK"
        time:
          type: "string"
          description: "Transport time (yyyy-MM-ddTHH:mm:SS)"
          example: "2018-12-01T02:15:00"
        transportRequired:
          type: "boolean"
          description: "Guest requires transportation"
          example: true
    Stay:
      type: "object"
      properties:
        propertyId:
          $ref: "#/components/schemas/PropertyId"
        reservationId:
          type: "string"
          description: "Id of reservation associated with stay"
          example: "542154"
        roomStay:
          $ref: "#/components/schemas/RoomStay"
        repositoryCreated:
          type: "string"
          description: "Repository create date in YYYY-MM-DDThh:mm:ss.sss format"
          example: "2018-06-01T15:34:54.000"
        repositoryUpdated:
          type: "string"
          description: "Repository update date in YYYY-MM-DDThh:mm:ss.sss format"
          example: "2018-06-01T15:34:54.000"
  securitySchemes:
    Bearer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
